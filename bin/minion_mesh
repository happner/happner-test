#!/usr/bin/env node

/*
 * ### Run minion with mesh node connected uptree.
 * 
 * var report - MeshClient connected to the marshal that spawned this
 *              for reporting. (see scripts/mesh_default)
 *
 * mesh       - Mesh connected uptree to either 'secure' or 'insecure'
 *              mesh nodes. (the test target)
 *
 * #### call from browser console
 * 
 * > action('controller.spawnMinions', 1, {type: 'mesh'}); //, script: 'default', endpoint: 'insecure'});
 *
 */

var opts = JSON.parse(process.argv[2]);

var marshal = opts.marshal;
var config = opts.config.config;
var endpoint = opts.config.endpoint;
var script = opts.config.script;
var name = opts.config.name;
var user = opts.config.user || {};

var endpointConfig = 
  endpoint == 'insecure' ? {
    config: {
      host: process.env.INSECURE_ADDRESS,
      port: parseInt(process.env.INSECURE_PORT),
    }
  } : endpoint == 'secure' ? {
    config: {
      host: process.env.SECURE_ADDRESS,
      port: parseInt(process.env.SECURE_PORT),
      username: user.username || 'guest',
      password: user.password || ''
    }
  } : { // default
    config: {
      host: process.env.INSECURE_ADDRESS,
      port: parseInt(process.env.INSECURE_PORT), 
    }
  };

endpointConfig.name = endpoint;

var configGen = require('../configs/minion_' + config);

var config = configGen.createConfig(name, endpointConfig, user);

var Happner = require('happner');

var error = function(e) {
  if (report && report.exchange) {
    var ee = {};
    ee.name = e.name;
    ee.message = e.message;
    Object.keys(e).forEach(function(key) {
      ee[key] = e[key];
    });
    return report.exchange.controller.minionError(name, ee)
    .then(function() {
      process.exit(1);
    })
    .catch(function() {
      console.error(e);
      process.exit(1);
    })

  }
  process.exit(1);
}

// Reports back to marshal.
var report = new Happner.MeshClient({
  host: marshal.datalayer.address.address,
  port: marshal.datalayer.address.port,
})

report.login()
.then(function() {
  return Happner.create(config)
})
.then(function(mesh) {
  var name = mesh._mesh.config.name;
  return report.exchange.controller.minionReady({
    name: name,
    timestamp: Date.now()
  })
  .then(function() {
    var run = require('../scripts/mesh_' + script);

    // Call specified script with:
    // name (of minion),
    // report (meshclient connected to marshal),
    // mesh (the spawned mesh),
    return run.start(name, report, mesh);

  })
})
.catch(error);
