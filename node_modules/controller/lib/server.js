module.exports = ControllerServer;

var os = require('os');

function ControllerServer() {

  this.marshals = {};

  this.info = {
    process: os.hostname() + '/' + process.pid
  };

}

ControllerServer.prototype.start = function($happn, www, callback) {

  var _this = this;

  $happn._mesh.datalayer.events.on('attach', function(ev) {
    // console.log('attached', JSON.stringify(ev, null, 2));
  });

  $happn._mesh.datalayer.events.on('detatch', function(ev) {
    // console.log('detatched', JSON.stringify(ev, null, 2));

    var name;

    try { 
      name = ev.info.mesh.name;
    } catch (e) {
      $happn.log.error('detatch without name', e);
      return;
    }

    if (_this.marshals[name]) {
      $happn.emit('marshal/destroyed', _this.marshals[name]);
      delete _this.marshals[name];
    }

  });

  setInterval(function() {

    $happn.emit('keepalive', {
      master: _this.info
    });

  }, 1000);


  setInterval(function() {

    www.exchange.www.update({

      marshals: _this.marshals

    }, function() {});

  }, 2000);
  
  callback();

}


ControllerServer.prototype.registerMarshal = function($happn, registration, callback) {

  var name = registration.info.mesh.name;
  this.marshals[name] = registration;
  this.marshals[name].minions = this.marshals[name].minions || {};

  $happn.emit('marshal/created', registration);

  callback(null, this.info);

}


ControllerServer.prototype.spawnMinions = function($happn, opts, callback) {

  $happn.log.info('spawnMinions %j', opts);
  
  var count = opts.count || 1;
  var marshals = Object.keys(this.marshals);

  opts.type = opts.type || 'mesh';
  opts.config = opts.type == 'mesh' ? opts.config || 'default' : null;
  opts.endpoint = opts.type == 'mesh' ? opts.endpoint || 'default' : null;
  opts.script = opts.script || 'default';

  if (marshals.length < 1) return callback(new Error('no marshals'));

  var result = {marshals: {}};

  // When spawing one at a time into multiple marshals,
  // this makes it not always spawn into the first marshal
  var lastOffset = this.lastOffset || 0;
  for (var i = lastOffset + 1; i < count + lastOffset + 1; i++) {

    var offset = i % marshals.length;
    this.lastOffset = offset;

    var next = marshals[offset];

    $happn.emit('minion/spawn/at/' + next, {
      type: opts.type,
      config: opts.config,
      endpoint: opts.endpoint,
      name: opts.name,
      user: opts.user,
      script: opts.script,
    });

    result.marshals[next] = result.marshals[next] || {spawning: 0};
    result.marshals[next].spawning++;
  }
  
  callback(null, result);

}


ControllerServer.prototype.killMinions = function($happn, opts, callback) {
  opts = opts || {};
  $happn.log.info('killMinions %j', opts || {});

  $happn.emit('minion/killall');

  callback();

};

ControllerServer.prototype.killMinion = function($happn, opts, callback) {
  opts = opts || {};
  $happn.log.info('killMinion %j', opts || {});

  var name = opts;

  $happn.emit('minion/kill/' + name);

  callback();

};


ControllerServer.prototype.createMinion = function($happn, registration, callback) {

  var marshalName = registration.info.mesh.name;
  var marshal = this.marshals[marshalName];
  var minion = registration.minion;

  $happn.log.info('createMinion \'%s\'', minion.name || minion.id);

  marshal.minions[minion.id] = minion;
  callback();

}


ControllerServer.prototype.destroyMinion = function($happn, registration, callback) {

  var marshalName = registration.info.mesh.name;
  var marshal = this.marshals[marshalName];
  var minion = registration.minion;

  $happn.log.info('destroyMinion \'%s\'', minion.name || minion.id);

  var key = minion.name || minion.id

  if (marshal.minions[key].status == 'error' || marshal.minions[key].status == 'finished') {
    setTimeout(function() {
      delete marshal.minions[key];
    }, 15000);
    return callback();
  }

  delete marshal.minions[key];
  callback();

}


ControllerServer.prototype.updateMinion = function($happn, update, callback) {

  var marshalName = update.info.mesh.name;
  var marshal = this.marshals[marshalName];
  var minion = update.minion;

  $happn.log.info('updateMinion \'%s\'', minion.name || minion.id);

  var key = minion.name || minion.id;

  if (minion.name && !marshal.minions[minion.name]) {
    delete marshal.minions[minion.id]
  }

  marshal.minions[key] = minion;
  callback();

}



