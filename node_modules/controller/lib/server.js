module.exports = ControllerServer;

var os = require('os');

function ControllerServer() {

  this.marshals = {};

  this.info = {
    process: os.hostname() + '/' + process.pid
  };

}

ControllerServer.prototype.start = function($happn, callback) {

  var _this = this;

  $happn._mesh.datalayer.events.on('attach', function(ev) {
    console.log('attached', JSON.stringify(ev, null, 2));
  });

  $happn._mesh.datalayer.events.on('detatch', function(ev) {
    console.log('detatched', JSON.stringify(ev, null, 2));

    var name;

    try { 
      name = ev.info.happner.mesh.name;
    } catch (e) {
      $happn.log.error('detatch without name', e);
      return;
    }

    if (_this.marshals[name]) {
      $happn.emit('marshal/destroyed', _this.marshals[name]);
      delete _this.marshals[name];
    }

  });

  setInterval(function() {

    $happn.emit('keepalive', _this.info);

  });
  
  callback();

}



/**
 * ### .register(info)
 * 
 * Called by controller.Marshal when ready for instruction.
 *
 */

ControllerServer.prototype.register = function($happn, info, callback) {

  var name = info.mesh.name;
  this.marshals[name] = info;

  $happn.emit('marshal/created', info);

  callback(null, this.info);

}
