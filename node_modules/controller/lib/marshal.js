module.exports = ControllerMarshal;

var Promise = require('bluebird');
var shortid = require('shortid');
var spawn = require('child_process').spawn;

function ControllerMarshal() {
  this.minions = {};
  this.pendingMinions = {};
}

ControllerMarshal.prototype.start = function($happn, callback) {

  var _this = this;

  var masterAddress = $happn.config.master.split('/');
  var masterExchange = $happn.exchange[masterAddress[0]][masterAddress[1]];
  var masterEvent = $happn.event[masterAddress[0]][masterAddress[1]];


  return Promise.all([

    masterEvent.onAsync('keepalive', function(data) {

      var master = data.master;
      if (master.process == _this.master.process) return;

      // new master detected, reregister
      masterExchange.registerMarshal({
        info: $happn.info,
        minions: _this.minions,
      })
      .then(function(masterInfo) {
        _this.master = masterInfo;
      })
      .catch(function(e) {
        $happn.error('re-register failed', e);
      })
    }),


    masterEvent.onAsync('minion/spawn/at/' + $happn.info.mesh.name, function(data, meta) {
      var id = shortid();
      data.id = id;
      _this.minions[id] = data;

      var spawnConfig = JSON.stringify({
        id: id,
        marshal: $happn.info,
        config: data,
      });

      var child = spawn('bin/minion_' + data.type, [spawnConfig]);

      Object.defineProperty(_this.minions[id], 'process', {
        value: child
      });

      child.on('error', function(e) {
        $happn.log.error('spawn error', e);
      });

      child.on('close', function() {

        var minionName;

        for (var name in _this.minions) {
          if (_this.minions[name].id == id) {
            minionName = name;
          }
        }

        if (!minionName) return;

        masterExchange.destroyMinion({
          info: $happn.info,
          minion: _this.minions[minionName]
        })
        .catch(function(e) {
          $happn.log.error('error de-registering minion', e);
        })
        .finally(function() {
          delete _this.minions[minionName];
        })
      });

      // child.stdout.on('data', function(data) {
      //   console.log('STDOUT -', data.toString());
      // });

      // child.stderr.on('data', function(data) {
      //   console.log('STDERR -', data.toString());
      // });

      masterExchange.createMinion({
        info: $happn.info,
        minion: _this.minions[id],
      })
      .catch(function(e) {
        $happn.log.error('error registering minion', e);
      })

    }),

    masterEvent.onAsync('minion/killall', function(data, meta) {
      $happn.log.info('kill all minions');
      for (var name in _this.minions) {
        $happn.log.info('kill minion \'%s\'', name);
        _this.minions[name].process.kill();
      }
    }),

    masterEvent.onAsync('minion/kill/*', function(data, meta) {
      var name = meta.path.split('/').pop();
      if (!_this.minions[name]) {
        for (var mname in _this.minions) {
          if (_this.minions[mname].id == name) {
            $happn.log.info('kill minion \'%s\'', mname);
            _this.minions[mname].process.kill();
            return;
          }
        }
      };
      $happn.log.info('kill minion \'%s\'', name);
      _this.minions[name].process.kill();
    }),

  ])

  .then(function() {
    return masterExchange.registerMarshal({
      info: $happn.info,
      minions: _this.minions,
    });
  })

  .then(function(masterInfo) {
    _this.master = masterInfo;
  })

  .then(function() {

    process.on('exit', function() {
      for (var name in _this.minions) {
        _this.minions[name].process.kill();
      }
    })

  })

  .then(callback)

  .catch(callback);

}

ControllerMarshal.prototype.minionReady = function($happn, update, callback) {
  var id = update.id;
  var name = update.name;
  var timestamp = update.timestamp;

  var minion = this.minions[id];
  delete this.minions[id];

  minion.name = name;
  minion.status = 'started';
  minion.startedAt = timestamp;

  this.minions[name] = minion;

  var masterAddress = $happn.config.master.split('/');
  var masterExchange = $happn.exchange[masterAddress[0]][masterAddress[1]];

  masterExchange.updateMinion({
    info: $happn.info,
    minion: minion
  })
  .then(function() {
    callback();
  })
  .catch(function(e) {
    $happn.log.error('error updating minion (update)', e);
    callback();
  })


}

ControllerMarshal.prototype.minionError = function($happn, id, error, callback) {
  $happn.log.error('minion \'%s\' error', id, error);

  var minion = this.minions[id];

  if (!minion) {
    for (var name in this.minions) {
      if (this.minions[name].id == id) {
        minion = this.minions[name];
      }
    }
  }

  if (!minion) return callback();

  var masterAddress = $happn.config.master.split('/');
  var masterExchange = $happn.exchange[masterAddress[0]][masterAddress[1]];

  minion.status = 'error';
  minion.errorAt = Date.now();
  minion.error = error;

  masterExchange.updateMinion({
    info: $happn.info,
    minion: minion,
  })
  .then(function() {
    callback();
  })
  .catch(function(e) {
    $happn.log.error('error updating minion (error)', e);
    callback();
  });

}



ControllerMarshal.prototype.minionUpdate = function($happn, name, stat, callback) {

  $happn.log.info('minion \'%s\' update stat: \'%s\'', name, stat);
  callback();

}


ControllerMarshal.prototype.minionDone = function($happn, name, result, callback) {

  $happn.log.info('minion \'%s\' done result: \'%s\'', name, result);
  
  var minion = this.minions[name];
  minion.status = 'done';
  minion.doneAt = Date.now();

  var masterAddress = $happn.config.master.split('/');
  var masterExchange = $happn.exchange[masterAddress[0]][masterAddress[1]];

  masterExchange.updateMinion({
    info: $happn.info,
    minion: minion,
  })
  .then(function() {
    callback();
  })
  .catch(function(e) {
    $happn.log.error('error updating minion (done)', e);
    callback();
  });


}
