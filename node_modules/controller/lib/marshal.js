module.exports = ControllerMarshal;

var Promise = require('bluebird');
var shortid = require('shortid');
var spawn = require('child_process').spawn;

function ControllerMarshal() {
  this.minions = {};
}

ControllerMarshal.prototype.start = function($happn, callback) {

  var _this = this;

  var masterAddress = $happn.config.master.split('/');
  var masterExchange = $happn.exchange[masterAddress[0]][masterAddress[1]];
  var masterEvent = $happn.event[masterAddress[0]][masterAddress[1]];


  return Promise.all([

    masterEvent.onAsync('keepalive', function(data) {

      var master = data.master;
      if (master.process == _this.master.process) return;

      // new master detected, reregister
      masterExchange.registerMarshal({
        info: $happn.info,
        minions: _this.minions,
      })
      .then(function(masterInfo) {
        _this.master = masterInfo;
      })
      .catch(function(e) {
        $happn.error('re-register failed', e);
      })
    }),


    masterEvent.onAsync('minion/spawn/at/' + $happn.info.mesh.name, function(data, meta) {
      var name = shortid();
      _this.minions[name] = data;

      var spawnConfig = JSON.stringify({
        name: name,
        marshal: $happn.info,
        config: data,
      });

      console.log(data);

      var child = spawn('bin/minion_' + data.type, [spawnConfig]);

      Object.defineProperty(_this.minions[name], 'process', {
        value: child
      });

      child.on('error', function(e) {
        $happn.log.error('spawn error', e);
      });

      child.on('close', function() {
        masterExchange.deRegisterMinion({
          info: $happn.info,
          minion: {
            name: name,
            data: _this.minions[name],
          }
        })
        .catch(function(e) {
          $happn.log.error('error de-registering minion', e);
        })
        .finally(function() {
          delete _this.minions[name];
        })
      });

      child.stdout.on('data', function(data) {
        console.log('STDOUT -', data.toString());
      });

      child.stderr.on('data', function(data) {
        console.log('STDERR -', data.toString());
      });

      masterExchange.registerMinion({
        info: $happn.info,
        minion: {
          name: name,
          data: _this.minions[name],
        }
      })
      .catch(function(e) {
        $happn.log.error('error registering minion', e);
      })

    }),

    masterEvent.onAsync('minion/killall', function(data, meta) {
      $happn.log.info('kill all minions');
      for (var name in _this.minions) {
        _this.minions[name].process.kill();
      }
    }),

    masterEvent.onAsync('minion/kill/*', function(data, meta) {
      var name = meta.path.split('/').pop();
      if (!_this.minions[name]) return;
      $happn.log.info('kill minion \'%s\'', name);
      _this.minions[name].process.kill();
      
    }),

  ])

  .then(function() {
    return masterExchange.registerMarshal({
      info: $happn.info,
      minions: _this.minions,
    });
  })

  .then(function(masterInfo) {
    _this.master = masterInfo;
  })

  .then(function() {

    process.on('exit', function() {
      for (var name in _this.minions) {
        _this.minions[name].process.kill();
      }
    })

  })

  .then(callback)

  .catch(callback);

}
